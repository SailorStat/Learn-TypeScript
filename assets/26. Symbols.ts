//? Символы
// Начиная с ECMAScript 2015, symbols это примитивный тип данных, как number и string

// symbol-значения создаются путём вызова Symbol-контсруктора
const sym1 = Symbol()
const sym2 = Symbol("key")
// Символы неизменяемы и уникальны

// Как и строки, символы могут использоваться в качестве ключей для свойств объекта
{
  const sym = Symbol()
  const obj = {
    [sym]: "value"
  }
}

// Символы можно комбинировать с объявлениями вычисленных свойств для объявления свойств объекта и членов
// класса
{
  const getClassNameSymbol = Symbol()
  class C {
    [getClassNameSymbol]() {
      return "C"
    }
  }
  let c = new C()
  let className = c[getClassNameSymbol]()
}


//* Общеизвестные символы
// Помимо определённых пользователем символов, есть хорошо известные встроенные символы. Встроенные символы
// используются для обозначения поведения внутренего языка

// Вот список известных символов

//todo Symbol.hasInstance
// Метод, определяющий, распознает ли объект-конструктор объект как один из экземпляров контсруктора.
// Вызывается семантикой оператора instanceof

//todo Symbol.isConcatSpreadable
// Логическое значение, указывающее, что объект должен быть сведен к его элементам массива с помощью
// Array.prototype.concat

//todo Symbol.iterator
// Метод, возвращающий итератор по умолчанию для объекта. Вызывается семантикой for of

//todo Symbol.match
// Метод регулярного выражения, который сопоставляет регулярное выражение со строкой. Вызывается
// методом String.prototype.match

//todo Symbol.replace
// Метод регулярного выражения, заменяющий совпадающие подстроки строки. Вызывается методом
// String.prototype.replace

//todo Symbol.search
// Метод регулярного выражения, который возвращает индекс в строке, соответствующей регулярному выражению.
// Вызывается методом String.prototype.search

//todo Symbol.species
// Свойство со значением функции, которое является функцией-конструктором, которая используется для создания
// произвольных объектов

//todo Symbol.split
// Метод регулярного выражения, который разбивает строку по индексам, соответствующим резулярному выражению
// Вызывается методом String.prototype.split

//todo Symbol.toPrimitive
// Метод, преобразующий объект в соответствующее примитивное значение. Вызывается абстрактной операцией
// ToPrimitive

//todo Symbol.toStringTag
// Значение String, которое используется при создании строкового описания объекта по умолчанию. Вызывается
// внутренним методом Object.prototype.toString

//todo Symbol.unscopables
// Объект, чьи собственные имена свойств являются именами свойств, которые исключены из привязок среды "c"
// для связанных объектов